# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  - main

stages:
  - stage: Build
    displayName: "Build Replacer"
    jobs:
      #Test and build for Linux, Windows and MacOS
      - job: build
        displayName: "Test and build"
        strategy:
          #Use the following Azure build agents and set the os variable (used in artifact name)
          matrix:
            linux:
              imageName: 'ubuntu-latest'
              os: "lin"
            # mac:
            #   imageName: 'macOS-latest'
            #   os: "mac"
            # windows:
            #   imageName: 'windows-latest'
            #   os: "win"
        #Use the Azure vmImage to build the solution
        pool: 
          vmImage: $(imageName)

        steps: 
          #Install rust on the Azure build agent           
          - script: |
              curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
            displayName: "Install Rust"

          #Run the unit tests of our software. Do this onlyt when install rust succeeded
          - script: |  
              cargo test
            condition: succeeded()
            displayName: "Unit Tests"

          #Build the release. Do this only when tests succeeded
          - script: |
              cargo build --release
            condition: succeeded()
            displayName: "Build Solution"  

          #Copy the binaries to this artifact staging directory called: <os>/<binary>
          - task: CopyFiles@2
            condition: succeeded()
            displayName: "Copy binaries only"
            inputs:
              SourceFolder: '$(Build.SourcesDirectory)/target/release/'
              Contents: |
                replacer
                replacer.exe
              TargetFolder: '$(Build.ArtifactStagingDirectory)/'

          #Build the artifect for each os. Name the artidact replace-<os>
          - task: PublishBuildArtifacts@1
            displayName: "Package artifact"
            condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'
              ArtifactName: replacer-$(os)
              publishLocation: 'Container'
  #Deploy the succesfully build binaries into replacer git repo under directory binaries
  - stage: deploy
    dependsOn: Build
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    displayName:  "Deploy to GIT"
    jobs:
      #Clone the repositry (do not use checkout as that is a detached HEAD)
      - job: enrich
        displayName: "Enrich Repo with binary artifacts"
        condition: succeeded()
        steps:
          - task: DownloadBuildArtifacts@1
            displayName: "Artifects"
            inputs:
              buildType: 'current'
              downloadType: 'single'
              downloadPath: '$(System.ArtifactsDirectory)/binaries'
          - script: |
                    git config --global user.email "rdoetjes@phonax.com"
                    git config --global user.name "Build Agent"
                    git branch binaries
                    git checkout main
                    git merge binaries
                    git add 'binaries/*'
                    git commit -am "deployed linux binaries [skip ci]"
                    git push
                    git tag -a build_$(Build.BuildNumber) -m "BUILD $(Build.BuildNumber)"
          # - task: DownloadBuildArtifacts@1
          #   displayName: "MacOS"
          #   inputs:
          #     buildType: 'current'
          #     downloadType: 'single'
          #     artifactName: 'replacer-mac'
          #     downloadPath: '$(System.ArtifactsDirectory)/commit/replacer/binaries/'

          # - task: DownloadBuildArtifacts@1
          #   displayName: "Windows"
          #   inputs:
          #     buildType: 'current'
          #     downloadType: 'single'
          #     artifactName: 'replacer/binary/replacer-win'
          #     downloadPath: '$(System.ArtifactsDirectory)/commit/replacer/binaries/'
      #Commit and push the added build binaries to the reposistory, suppress a build by using [skip ci]
      

      
            